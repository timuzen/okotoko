import os
import time
import threading
import requests
import schedule
import logging

PIXELDRAIN_API_URL = 'https://pixeldrain.com/api'
API_KEY = os.getenv("PIXELDRAIN_API_KEY")

logger = logging.getLogger(__name__)

def keep_alive_api_key(api_key: str) -> bool:
    try:
        response = requests.get(
            f'{PIXELDRAIN_API_URL}/user',
            auth=('timuzen', api_key),
            timeout=10
        )
        if response.ok:
            logger.info("‚úÖ API-–∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω (keep-alive)")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {response.status_code} {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ keep-alive –∑–∞–ø—Ä–æ—Å–µ: {e}")
    return False


def upload_to_cloud(filepath: str, api_key: str) -> str | None:

    try:
        with open(filepath, 'rb') as f:
            response = requests.post(
                f'{PIXELDRAIN_API_URL}/file',
                auth=('timuzen', api_key),
                files={'file': (os.path.basename(filepath), f)},
                data={'name': os.path.basename(filepath)},
                timeout=(10, 180)
            )

        try:
            json_data = response.json()
        except ValueError:
            logger.error("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, HTML-–æ—à–∏–±–∫–∞")
            logger.debug(f"Raw response: {response.text}")
            return None

        if response.ok:
            file_id = json_data.get("id")
            if file_id:
                url = f"https://pixeldrain.com/u/{file_id}"
                logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {url}")
                return url
            else:
                logger.warning(f"‚ö†Ô∏è –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ ID: {json_data}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code} {response.text}")

    except requests.exceptions.Timeout:
        logger.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
    except requests.exceptions.RequestException as e:
        logger.error(f"üì° –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

    return None


def start_keep_alive_scheduler():
    if not API_KEY:
        logger.warning("‚ö†Ô∏è API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ keep-alive –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return

    def _wrapped_keep_alive():
        logger.info("üîÅ Keep-alive –∑–∞–ø—Ä–æ—Å –∫ PixelDrain...")
        success = keep_alive_api_key(API_KEY)
        if success:
            logger.info("‚úÖ Keep-alive —É—Å–ø–µ—à–µ–Ω")
        else:
            logger.warning("‚ùå Keep-alive –ø—Ä–æ–≤–∞–ª–µ–Ω")

    schedule.every(7).days.at("03:00").do(_wrapped_keep_alive)
    logger.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ keep-alive –∑–∞–ø—É—â–µ–Ω: –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π –≤ 03:00")

    def run_schedule():
        while True:
            schedule.run_pending()
            time.sleep(60)

    thread = threading.Thread(target=run_schedule, daemon=True)
    thread.start()
